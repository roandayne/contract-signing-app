export declare const selectorChartsInteractionRotationAxisIndex: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
} & Partial<{}> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & import("./useChartPolarAxis.types").UseChartPolarAxisState) => number | null) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: number | null, resultFuncArgs_1: number | null, resultFuncArgs_2: {
    cx: number;
    cy: number;
  }, resultFuncArgs_3: {
    axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
    axisIds: string[];
  }) => number | null;
  memoizedResultFunc: ((resultFuncArgs_0: number | null, resultFuncArgs_1: number | null, resultFuncArgs_2: {
    cx: number;
    cy: number;
  }, resultFuncArgs_3: {
    axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
    axisIds: string[];
  }) => number | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => number | null;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => number | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../useChartInteraction/useChartInteraction.types").Coordinate | null) => number | null;
    memoizedResultFunc: ((resultFuncArgs_0: import("../useChartInteraction/useChartInteraction.types").Coordinate | null) => number | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number | null;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
        pointer: import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      } | undefined) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      memoizedResultFunc: ((resultFuncArgs_0: {
        item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
        pointer: import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      } | undefined) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      dependencies: [import("../../..").ChartOptionalRootSelector<import("../useChartInteraction").UseChartInteractionSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => number | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../useChartInteraction/useChartInteraction.types").Coordinate | null) => number | null;
    memoizedResultFunc: ((resultFuncArgs_0: import("../useChartInteraction/useChartInteraction.types").Coordinate | null) => number | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number | null;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
        pointer: import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      } | undefined) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      memoizedResultFunc: ((resultFuncArgs_0: {
        item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
        pointer: import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      } | undefined) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      dependencies: [import("../../..").ChartOptionalRootSelector<import("../useChartInteraction").UseChartInteractionSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  } & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState>) => {
    cx: number;
    cy: number;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }) => {
      cx: number;
      cy: number;
    };
    memoizedResultFunc: ((resultFuncArgs_0: {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }) => {
      cx: number;
      cy: number;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => {
      cx: number;
      cy: number;
    };
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    } & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState>) => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      };
      memoizedResultFunc: ((resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      };
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => number;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => number;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
          memoizedResultFunc: ((resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
          dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
          memoizedResultFunc: ((resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
          dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
          memoizedResultFunc: ((resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
          dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
          memoizedResultFunc: ((resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
          dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("./useChartPolarAxis.types").UseChartPolarAxisState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  } & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState>) => {
    axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
    axisIds: string[];
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[], resultFuncArgs_1: {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }, resultFuncArgs_2: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) => {
      axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
      axisIds: string[];
    };
    memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[], resultFuncArgs_1: {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }, resultFuncArgs_2: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) => {
      axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
      axisIds: string[];
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => {
      axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
      axisIds: string[];
    };
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("./useChartPolarAxis.types").UseChartPolarAxisState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[]) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        rotation: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsRotationAxisProps>[];
        radius: import("../../..").AxisConfig<"linear", any, import("../../..").ChartsRadiusAxisProps>[];
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[];
      memoizedResultFunc: ((resultFuncArgs_0: {
        rotation: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsRotationAxisProps>[];
        radius: import("../../..").AxisConfig<"linear", any, import("../../..").ChartsRadiusAxisProps>[];
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[]) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[];
      dependencies: [(state: import("../../models").ChartState<[import("./useChartPolarAxis.types").UseChartPolarAxisSignature]>) => {
        rotation: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsRotationAxisProps>[];
        radius: import("../../..").AxisConfig<"linear", any, import("../../..").ChartsRadiusAxisProps>[];
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    } & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState>) => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      };
      memoizedResultFunc: ((resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      };
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => number;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => number;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
          memoizedResultFunc: ((resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
          dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
          memoizedResultFunc: ((resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
          dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
          memoizedResultFunc: ((resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
          dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
          memoizedResultFunc: ((resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
          dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      memoizedResultFunc: ((resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      memoizedResultFunc: ((resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartsInteractionRotationAxisValue: ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
  cacheKey: import("../../models").ChartStateCacheKey;
} & import("./useChartPolarAxis.types").UseChartPolarAxisState & Partial<{}> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState>) => any) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: number | null, resultFuncArgs_1: number | null, resultFuncArgs_2: {
    axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
    axisIds: string[];
  }, resultFuncArgs_3: number | null) => any;
  memoizedResultFunc: ((resultFuncArgs_0: number | null, resultFuncArgs_1: number | null, resultFuncArgs_2: {
    axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
    axisIds: string[];
  }, resultFuncArgs_3: number | null) => any) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => any;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => number | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../useChartInteraction/useChartInteraction.types").Coordinate | null) => number | null;
    memoizedResultFunc: ((resultFuncArgs_0: import("../useChartInteraction/useChartInteraction.types").Coordinate | null) => number | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number | null;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
        pointer: import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      } | undefined) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      memoizedResultFunc: ((resultFuncArgs_0: {
        item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
        pointer: import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      } | undefined) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      dependencies: [import("../../..").ChartOptionalRootSelector<import("../useChartInteraction").UseChartInteractionSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  }) => number | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../useChartInteraction/useChartInteraction.types").Coordinate | null) => number | null;
    memoizedResultFunc: ((resultFuncArgs_0: import("../useChartInteraction/useChartInteraction.types").Coordinate | null) => number | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number | null;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
        pointer: import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      } | undefined) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      memoizedResultFunc: ((resultFuncArgs_0: {
        item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
        pointer: import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      } | undefined) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
      dependencies: [import("../../..").ChartOptionalRootSelector<import("../useChartInteraction").UseChartInteractionSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("./useChartPolarAxis.types").UseChartPolarAxisState & Partial<{}> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  } & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState>) => {
    axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
    axisIds: string[];
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[], resultFuncArgs_1: {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }, resultFuncArgs_2: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) => {
      axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
      axisIds: string[];
    };
    memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[], resultFuncArgs_1: {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }, resultFuncArgs_2: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) => {
      axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
      axisIds: string[];
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => {
      axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
      axisIds: string[];
    };
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("./useChartPolarAxis.types").UseChartPolarAxisState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[]) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        rotation: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsRotationAxisProps>[];
        radius: import("../../..").AxisConfig<"linear", any, import("../../..").ChartsRadiusAxisProps>[];
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[];
      memoizedResultFunc: ((resultFuncArgs_0: {
        rotation: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsRotationAxisProps>[];
        radius: import("../../..").AxisConfig<"linear", any, import("../../..").ChartsRadiusAxisProps>[];
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[]) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[];
      dependencies: [(state: import("../../models").ChartState<[import("./useChartPolarAxis.types").UseChartPolarAxisSignature]>) => {
        rotation: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsRotationAxisProps>[];
        radius: import("../../..").AxisConfig<"linear", any, import("../../..").ChartsRadiusAxisProps>[];
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    } & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState>) => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      };
      memoizedResultFunc: ((resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      };
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => number;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => number;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
          memoizedResultFunc: ((resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
          dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
          memoizedResultFunc: ((resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
          dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
          memoizedResultFunc: ((resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
          dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
        memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => number;
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
          memoizedResultFunc: ((resultFuncArgs_0: {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
          dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
            x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
            y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
          } | undefined];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      memoizedResultFunc: ((resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
      dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      memoizedResultFunc: ((resultFuncArgs_0: {
        processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
      dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
    cacheKey: import("../../models").ChartStateCacheKey;
  } & Partial<{}> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & import("./useChartPolarAxis.types").UseChartPolarAxisState) => number | null) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: number | null, resultFuncArgs_1: number | null, resultFuncArgs_2: {
      cx: number;
      cy: number;
    }, resultFuncArgs_3: {
      axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
      axisIds: string[];
    }) => number | null;
    memoizedResultFunc: ((resultFuncArgs_0: number | null, resultFuncArgs_1: number | null, resultFuncArgs_2: {
      cx: number;
      cy: number;
    }, resultFuncArgs_3: {
      axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
      axisIds: string[];
    }) => number | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number | null;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../useChartInteraction/useChartInteraction.types").Coordinate | null) => number | null;
      memoizedResultFunc: ((resultFuncArgs_0: import("../useChartInteraction/useChartInteraction.types").Coordinate | null) => number | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number | null;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
          pointer: import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
        } | undefined) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
        memoizedResultFunc: ((resultFuncArgs_0: {
          item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
          pointer: import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
        } | undefined) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
        dependencies: [import("../../..").ChartOptionalRootSelector<import("../useChartInteraction").UseChartInteractionSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    }) => number | null) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../useChartInteraction/useChartInteraction.types").Coordinate | null) => number | null;
      memoizedResultFunc: ((resultFuncArgs_0: import("../useChartInteraction/useChartInteraction.types").Coordinate | null) => number | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number | null;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartInteraction/useChartInteraction.types").UseChartInteractionState> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
          pointer: import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
        } | undefined) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
        memoizedResultFunc: ((resultFuncArgs_0: {
          item: null | import("../../..").ChartItemIdentifier<import("../../..").ChartSeriesType>;
          pointer: import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
        } | undefined) => import("../useChartInteraction/useChartInteraction.types").Coordinate | null) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../useChartInteraction/useChartInteraction.types").Coordinate | null;
        dependencies: [import("../../..").ChartOptionalRootSelector<import("../useChartInteraction").UseChartInteractionSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    } & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState>) => {
      cx: number;
      cy: number;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      }) => {
        cx: number;
        cy: number;
      };
      memoizedResultFunc: ((resultFuncArgs_0: {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      }) => {
        cx: number;
        cy: number;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => {
        cx: number;
        cy: number;
      };
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      } & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState>) => {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
          width: number;
          left: number;
          right: number;
          height: number;
          top: number;
          bottom: number;
        };
        memoizedResultFunc: ((resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
          width: number;
          left: number;
          right: number;
          height: number;
          top: number;
          bottom: number;
        }) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => {
          width: number;
          left: number;
          right: number;
          height: number;
          top: number;
          bottom: number;
        };
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => number;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => number;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            memoizedResultFunc: ((resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            memoizedResultFunc: ((resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            memoizedResultFunc: ((resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            memoizedResultFunc: ((resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("./useChartPolarAxis.types").UseChartPolarAxisState & Partial<{}> & {
      cacheKey: import("../../models").ChartStateCacheKey;
    } & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState>) => {
      axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
      axisIds: string[];
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[], resultFuncArgs_1: {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      }, resultFuncArgs_2: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) => {
        axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
        axisIds: string[];
      };
      memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[], resultFuncArgs_1: {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      }, resultFuncArgs_2: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) => {
        axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
        axisIds: string[];
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => {
        axis: import("./computeAxisValue").DefaultizedAxisConfig<import("../../..").ChartsRotationAxisProps>;
        axisIds: string[];
      };
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & import("./useChartPolarAxis.types").UseChartPolarAxisState & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[]) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          rotation: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsRotationAxisProps>[];
          radius: import("../../..").AxisConfig<"linear", any, import("../../..").ChartsRadiusAxisProps>[];
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[];
        memoizedResultFunc: ((resultFuncArgs_0: {
          rotation: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsRotationAxisProps>[];
          radius: import("../../..").AxisConfig<"linear", any, import("../../..").ChartsRadiusAxisProps>[];
        }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[]) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsRotationAxisProps>[];
        dependencies: [(state: import("../../models").ChartState<[import("./useChartPolarAxis.types").UseChartPolarAxisSignature]>) => {
          rotation: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsRotationAxisProps>[];
          radius: import("../../..").AxisConfig<"linear", any, import("../../..").ChartsRadiusAxisProps>[];
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      } & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState>) => {
        width: number;
        left: number;
        right: number;
        height: number;
        top: number;
        bottom: number;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
          width: number;
          left: number;
          right: number;
          height: number;
          top: number;
          bottom: number;
        };
        memoizedResultFunc: ((resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
          width: number;
          left: number;
          right: number;
          height: number;
          top: number;
          bottom: number;
        }) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => {
          width: number;
          left: number;
          right: number;
          height: number;
          top: number;
          bottom: number;
        };
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => number;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => number;
          memoizedResultFunc: ((resultFuncArgs_0: {
            margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            width: number;
            height: number;
            propsWidth: number | undefined;
            propsHeight: number | undefined;
          }) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            memoizedResultFunc: ((resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            memoizedResultFunc: ((resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            memoizedResultFunc: ((resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            memoizedResultFunc: ((resultFuncArgs_0: {
              margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
              width: number;
              height: number;
              propsWidth: number | undefined;
              propsHeight: number | undefined;
            }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types").ChartMargin;
            dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartDimensionsSignature>];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsXAxisProps>[] | undefined;
            dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
          cacheKey: import("../../models").ChartStateCacheKey;
        }) => number) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) => number) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => number;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<import("../useChartCartesianAxis").UseChartCartesianAxisState> & {
            cacheKey: import("../../models").ChartStateCacheKey;
          }) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined) => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../..").AxisConfig<keyof import("../../..").AxisScaleConfig, any, import("../../..").ChartsYAxisProps>[] | undefined;
            dependencies: [(state: import("../../models").ChartState<[], [import("../useChartCartesianAxis").UseChartCartesianAxisSignature]>) => {
              x: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsXAxisProps>[];
              y: import("../../..").AxisConfig<import("../../..").ScaleName, any, import("../../..").ChartsYAxisProps>[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types").UseChartSeriesState<keyof import("../../..").ChartsSeriesConfig> & Partial<{}> & {
        cacheKey: import("../../models").ChartStateCacheKey;
      }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../..").ProcessedSeries<keyof import("../../..").ChartsSeriesConfig>;
          seriesConfig: import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        }) => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../models").ChartSeriesConfig<keyof import("../../..").ChartsSeriesConfig>;
        dependencies: [import("../../..").ChartRootSelector<import("../../..").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};