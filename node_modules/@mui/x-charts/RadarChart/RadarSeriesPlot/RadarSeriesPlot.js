"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadarSeriesPlot = RadarSeriesPlot;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useRadarSeriesData = require("./useRadarSeriesData");
var _getAreaPath = require("./getAreaPath");
var _useInteractionItemProps = require("../../hooks/useInteractionItemProps");
var _useItemHighlightedGetter = require("../../hooks/useItemHighlightedGetter");
var _radarSeriesPlotClasses = require("./radarSeriesPlotClasses");
var _jsxRuntime = require("react/jsx-runtime");
function RadarSeriesPlot(props) {
  const seriesCoordinates = (0, _useRadarSeriesData.useRadarSeriesData)(props.seriesId);
  const interactionProps = (0, _useInteractionItemProps.useInteractionAllItemProps)(seriesCoordinates);
  const {
    isFaded,
    isHighlighted
  } = (0, _useItemHighlightedGetter.useItemHighlightedGetter)();
  const classes = (0, _radarSeriesPlotClasses.useUtilityClasses)(props.classes);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("g", {
    className: classes.root,
    children: seriesCoordinates?.map(({
      seriesId,
      points,
      color,
      showMark
    }, seriesIndex) => {
      const isItemHighlighted = isHighlighted({
        seriesId
      });
      const isItemFaded = !isItemHighlighted && isFaded({
        seriesId
      });
      return /*#__PURE__*/(0, _jsxRuntime.jsxs)("g", {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("path", (0, _extends2.default)({
          d: (0, _getAreaPath.getAreaPath)(points)
        }, interactionProps[seriesIndex], {
          className: isItemHighlighted && classes.highlighted || isItemFaded && classes.faded || undefined,
          fill: color,
          stroke: color,
          filter: isItemHighlighted ? 'brightness(120%)' : undefined,
          strokeOpacity: isItemFaded ? 0.5 : 1,
          fillOpacity: isItemFaded ? 0.1 : 0.4
        }), seriesId), showMark && points.map((point, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)("circle", {
          cx: point.x,
          cy: point.y,
          r: 5,
          fill: color,
          stroke: color
        }, index))]
      }, seriesId);
    })
  });
}
process.env.NODE_ENV !== "production" ? RadarSeriesPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * The id of the series to display.
   * If undefined all series are displayed.
   */
  seriesId: _propTypes.default.string
} : void 0;